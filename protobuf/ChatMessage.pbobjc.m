// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatMessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ChatMessage.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ChatMessageRoot

@implementation ChatMessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ChatMessageRoot_FileDescriptor

static GPBFileDescriptor *ChatMessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ChatMessage

@implementation ChatMessage

@dynamic type;
@dynamic id_p;
@dynamic content;

typedef struct ChatMessage__storage_ {
  uint32_t _has_storage_[1];
  ChatMessage_ChatType type;
  int32_t id_p;
  NSString *content;
} ChatMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ChatMessage_ChatType_EnumDescriptor,
        .number = ChatMessage_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatMessage__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessage_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatMessage__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessage_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatMessage__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatMessage class]
                                     rootClass:[ChatMessageRoot class]
                                          file:ChatMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ChatMessage_Type_RawValue(ChatMessage *message) {
  GPBDescriptor *descriptor = [ChatMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChatMessage_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetChatMessage_Type_RawValue(ChatMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [ChatMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChatMessage_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ChatMessage_ChatType

GPBEnumDescriptor *ChatMessage_ChatType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "System\000User\000";
    static const int32_t values[] = {
        ChatMessage_ChatType_System,
        ChatMessage_ChatType_User,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ChatMessage_ChatType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ChatMessage_ChatType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ChatMessage_ChatType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ChatMessage_ChatType_System:
    case ChatMessage_ChatType_User:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
